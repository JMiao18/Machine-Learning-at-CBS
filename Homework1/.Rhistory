force$default
fit <- aov(baltho ~ default, data = force)
summary(fit)
force = subset(data, type == "forced")
attach(force)
fit <- aov(baltho ~ default, data = force)
texreg::htmlreg(l = fit, center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "ANOVA", caption.above = TRUE, digits = 4)
summary(fit)
counts
counts <- table(choice,default)
barplot(counts, main="Barplot for Default versus Choice",
xlab="default", col=c("darkblue","red"),
ylim=c(0,1000))
legend("topright", legend = c("choice = 0","choice = 1"), fill = c("darkblue","red"))
counts <- table(choice,default)
barplot(counts, main="Barplot for Default versus Choice",
xlab="default", col=c("darkblue","red"),
ylim=c(0,1000))
legend("topright", legend = c("choice = 0","choice = 1"), fill = c("darkblue","red"))
counts <- table(data$choice,data$default)
barplot(counts, main="Barplot for Default versus Choice",
xlab="default", col=c("darkblue","red"),
ylim=c(0,1000))
legend("topright", legend = c("choice = 0","choice = 1"), fill = c("darkblue","red"))
model14 = lm(defaultchoice~smrd)
model15 = lm(defaultchoice~baltho)
texreg::htmlreg(l = list(model4, model5), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 14-15", caption.above = TRUE, digits = 4)
model12 = lm(smrd~default)
model12 = lm(smrd~default, data= natural)
model13 = lm(baltho~default, data = natural)
texreg::htmlreg(l = list(model2, model3), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 12-13", caption.above = TRUE, digits = 4)
natural = subset(data, type == "natural")
attach(natural)
smrd = as.numeric(smrd)
baltho = as.numeric(baltho)
defaultchoice = as.numeric(natural$defaultchoice)
model10 = lm(choice~smrd, data = natural)
model11 = lm(choice~baltho, data = natural)
texreg::htmlreg(l = list(model10, model11), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 10-11", caption.above = TRUE, digits = 4)
model14 = lm(defaultchoice~smrd, data = natural)
model15 = lm(defaultchoice~baltho, data = natural)
texreg::htmlreg(l = list(model4, model5), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 14-15", caption.above = TRUE, digits = 4)
natural = subset(data, type == "natural")
attach(natural)
smrd = as.numeric(smrd)
baltho = as.numeric(baltho)
defaultchoice = as.numeric(natural$defaultchoice)
model10 = lm(choice~smrd)
model11 = lm(choice~baltho)
texreg::htmlreg(l = list(model10, model11), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 10-11", caption.above = TRUE, digits = 4)
model12 = lm(smrd~default)
default
natural$default
model12 = lm(smrd~natural$default)
model13 = lm(baltho~natural$default)
texreg::htmlreg(l = list(model2, model3), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 12-13", caption.above = TRUE, digits = 4)
defaultchoice
model14 = lm(defaultchoice~smrd)
model15 = lm(defaultchoice~baltho)
texreg::htmlreg(l = list(model4, model5), center = TRUE, stars = c(0.001, 0.01, 0.05, 0.1),bold = 0.1, caption = "Model 14-15", caption.above = TRUE, digits = 4)
force = subset(data, type == "forced")
attach(force)
fit <- aov(baltho ~ default, data = force)
screenreg(fit)
texreg::screenreg(fit)
summary(fit)
Race
install.packages("xtable")
library(xtable)
# Coefficients
print(fit, type = "html")
# Analysis of variance.
print(xtable(fit), type = "html")
library(xtable)
# Coefficients
# print(fit, type = "html")
# Analysis of variance.
print(xtable(fit), type = "html")
mlfin = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/ff109d47a1f9b811.csv", header = TRUE)
rm(list=ls())
mlfin = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/ff109d47a1f9b811.csv", header = TRUE)
attach(mlfin)
mlfin$date = as.character(mlfin$date)
mlfin$date <- as.Date(mlfin$date, "%m/%d/%Y")
mlfin$RET = as.character(mlfin$RET)
mlfin$RET = as.numeric(mlfin$RET)
threshold1 = as.Date("12/31/2005","%m/%d/%Y")
threshold2 = as.Date("12/31/2010","%m/%d/%Y")
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
View(train1)
library(tidyr)
View(test)
data_wide <- spread(olddata_long, condition, measurement)
train1_wide <- spread(train1, COMNAM, RET)
View(train1_wide)
names(train1_wide)
newtest=subset(test, select = c(data, RET, TICKER))
is.matrix(test)
is.data.frame(test)
names(test)
newtest=subset(test, select = -c(PERMNO, TICKER))
newtest_wide = spread(newtest, COMNAM, RET)
View(newtest_wide)
summary(newtest_wide)
is.na(test_wide)
is.na(newtest_wide)
count(is.na(newtest_wide) == TRUE)
sum(is.na(newtest_wide) == TRUE)
rm(train1_wide)
newtrain1 = subset(train1, select = -c(PERMNO, TICKER))
newtrain2 = subset(train2, select = -c(PERMNO, TICKER))
newtest=subset(test, select = -c(PERMNO, TICKER))
newtrain1 = subset(train1, select = -c(PERMNO, TICKER))
train1wide = spread(newtrain1, COMNAM, RET)
newtrain2 = subset(train2, select = -c(PERMNO, TICKER))
train2wide = spread(newtrain2, COMNAM, RET)
newtest = subset(test, select = -c(PERMNO, TICKER))
testwide = spread(newtest, COMNAM, RET)
rm(c(train1,train2,test,newtrain1,newtest,newtrain2))
rm(list = c(train1,train2,test,newtrain1,newtest,newtrain2))
rm(train1,train2,test,newtrain1,newtest,newtrain2)
rm(newtest_wide)
View(testwide)
View(train1wide)
names(train1)
names(as.matrix(train1)
names(as.matrix(train1))
names(as.matrix(train1wide))
names(train1wide
)
names(train1wide)
train1wide$MINNESOTA MINING & MFG CO
train1wide$"MINNESOTA MINING & MFG CO"
names(train1wide)
train1wide$"3M CO"
is.na(train1wide$"MINNESOTA MINING & MFG CO")
is.na(train1wide$"MINNESOTA MINING & MFG CO") = 0
train1wide$"MINNESOTA MINING & MFG CO"
train1wide$"MINNESOTA MINING & MFG CO"[is.na(train1wide$"MINNESOTA MINING & MFG CO")] = 0
View(train1wide)
train1wide$"3M CO"[is.na(train1wide$"3M CO")] = 0
train1wide$"3M CO" + train1wide$"MINNESOTA MINING & MFG CO"
train1wide$"3M CO" = train1wide$"3M CO" + train1wide$"MINNESOTA MINING & MFG CO"
train1wide = subset(train1wide, select = -c(MINNESOTA MINING & MFG CO))
train1wide = subset(train1wide, select = -c("MINNESOTA MINING & MFG CO"))
train1wide = subset(train1wide, select = -"MINNESOTA MINING & MFG CO")
train1wide = subset(train1wide, select = -c(MINNESOTA MINING & MFG CO))
names(train1wide)
train1wide = subset(train1wide, select = -c("MINNESOTA MINING & MFG CO"))
train1wide$"J P MORGAN CHASE & CO"[is.na(train1wide$"J P MORGAN CHASE & CO")] = 0
train1wide$"JPMORGAN CHASE & CO"[is.na(train1wide$"JPMORGAN CHASE & CO")] = 0
train1wide$"MORGAN J P & CO INC"[is.na(train1wide$"MORGAN J P & CO INC")] = 0
train1wide$"MORGAN J P & CO INC" = train1wide$"J P MORGAN CHASE & CO" + train1wide$"JPMORGAN CHASE & CO" + train1wide$"MORGAN J P & CO INC"
train1wide$"MORGAN J P & CO INC"
is.na(train1wide$"MORGAN J P & CO INC")
sum(is.na(train1wide$"MORGAN J P & CO INC"))
train1wide = subset(train1wide, select = -c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO"))
ix <- which(rownames(train1wide) %in% c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO"))
mj <- train1wide[-ix, ]
train1wide = subset(train1wide, select = names(df) != c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO"))
mlfin = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/ff109d47a1f9b811.csv", header = TRUE)
attach(mlfin)
mlfin$date = as.character(mlfin$date)
mlfin$date <- as.Date(mlfin$date, "%m/%d/%Y")
mlfin$RET = as.character(mlfin$RET)
mlfin$RET = as.numeric(mlfin$RET)
threshold1 = as.Date("12/31/2005","%m/%d/%Y")
threshold2 = as.Date("12/31/2010","%m/%d/%Y")
summary(mlfin)
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
library(tidyr)
newtrain1 = subset(train1, select = -c(PERMNO, TICKER))
train1wide = spread(newtrain1, COMNAM, RET)
newtrain2 = subset(train2, select = -c(PERMNO, TICKER))
train2wide = spread(newtrain2, COMNAM, RET)
newtest = subset(test, select = -c(PERMNO, TICKER))
testwide = spread(newtest, COMNAM, RET)
rm(train1,train2,test,newtrain1,newtest,newtrain2)
names(train1wide)
train1wide$"MINNESOTA MINING & MFG CO"[is.na(train1wide$"MINNESOTA MINING & MFG CO")] = 0
train1wide$"3M CO"[is.na(train1wide$"3M CO")] = 0
train1wide$"3M CO" = train1wide$"3M CO" + train1wide$"MINNESOTA MINING & MFG CO"
train1wide = subset(train1wide, select = -c("MINNESOTA MINING & MFG CO"))
names(train1wide)
train1wide$"J P MORGAN CHASE & CO"[is.na(train1wide$"J P MORGAN CHASE & CO")] = 0
train1wide$"JPMORGAN CHASE & CO"[is.na(train1wide$"JPMORGAN CHASE & CO")] = 0
train1wide$"MORGAN J P & CO INC"[is.na(train1wide$"MORGAN J P & CO INC")] = 0
train1wide$"MORGAN J P & CO INC" = train1wide$"J P MORGAN CHASE & CO" + train1wide$"JPMORGAN CHASE & CO" + train1wide$"MORGAN J P & CO INC"
## train1wide = subset(train1wide, select = names(df) != c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO"))
mj = subset(train1wide, select = - eval(parse(text = c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO"))))
dname = c("JPMORGAN CHASE & CO", "MINNESOTA MINING & MFG CO", "J P MORGAN CHASE & CO")
mj = subset(train1wide, select = - eval(parse(text = dname)))
dname = c(JPMORGAN CHASE & CO, MINNESOTA MINING & MFG CO, J P MORGAN CHASE & CO)
View(train1wide)
View(train2wide)
names(train1wide)
names(train2wide)
names(testwide)
mlfin2 = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/b8142c7257d20c44.csv", header = TRUE)
View(mlfin2)
mlfin2 = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/b8142c7257d20c44.csv", header = TRUE)
View(mlfin2)
mlfin = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/b8142c7257d20c44.csv", header = TRUE)
attach(mlfin)
mlfin$date = as.character(mlfin$date)
mlfin$date <- as.Date(mlfin$date, "%m/%d/%Y")
mlfin$RET = as.character(mlfin$RET)
mlfin$RET = as.numeric(mlfin$RET)
threshold1 = as.Date("12/31/2005","%m/%d/%Y")
threshold2 = as.Date("12/31/2010","%m/%d/%Y")
summary(mlfin)
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
library(tidyr)
newtrain1 = subset(train1, select = -c(PERMNO, TICKER))
train1wide = spread(newtrain1, COMNAM, RET)
newtrain2 = subset(train2, select = -c(PERMNO, TICKER))
train2wide = spread(newtrain2, COMNAM, RET)
newtest = subset(test, select = -c(PERMNO, TICKER))
testwide = spread(newtest, COMNAM, RET)
rm(train1,train2,test,newtrain1,newtest,newtrain2)
names(train1wide)
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
train1
View(train1)
newtrain1 = subset(train1, select = -c(PERMNO))
train1wide = spread(newtrain1, TICKER, RET)
View(train1wide)
newtrain2 = subset(train2, select = -c(PERMNO))
train2wide = spread(newtrain2, TICKER, RET)
newtest = subset(test, select = -c(PERMNO))
testwide = spread(newtest, TICKER, RET)
rm(train1,train2,test,newtrain1,newtest,newtrain2)
View(train1wide)
names(train2wide)
names(train1wide)
names(testwide)
summary(train1wide)
apply(train1wide,1,mean)
apply(train1wide,1,mean,na.rm=TRUE)
apply(train1wide,2,mean,na.rm=TRUE)
apply(train1wide,2,mean,na.omit=TRUE)
View(train1wide)
apply(train1wide[2:,],2,mean,na.omit = TRUE)
apply(train1wide,1,mean,na.omit = TRUE)
apply(train1wide,1,mean,na.rm = TRUE)
apply(as.matrix(train1wide)[2:,],1,mean,na.rm = TRUE)
apply(as.matrix(train1wide),1,mean,na.rm = TRUE)
apply(as.matrix(train1wide)[1:,2],1,mean,na.rm = TRUE)
apply(as.matrix(train1wide)[1:],1,mean,na.rm = TRUE)
plot.ts(train1wide)
plot.ts(train1wide$AA)
?plot.ts
plot.ts(x=train1wide$date,y=train1wide$AA)
train1wide$date
train1wide[column != date]
train1wide[column != "date"]
train1wide[,-c("date")]
date
tsp <- as.POSIXct(date,format = "%m/%d/%Y",tz ="EST")
tsp
dtsp <- format(tst,"%y-%m-%d",tz = "EST")
dtsp <- format(tsp,"%y-%m-%d",tz = "EST")
aggregate("return.mean" = RET ~ Date,
data = train1wide,
FUN = mean)
aggregate(c("return.mean" = RET) ~ Date,
data = train1wide,
FUN = mean)
aggregate(c("return.mean" = RET) ~ dtsp,
data = train1wide,
FUN = mean)
RET
aggregate(c("return.mean" = RET) ~ dtsp,
data = train1wide,
FUN = mean)
apply.daily(train2wide,mean)
setwd("M:/A Master of Science in Marketing Sciences/MS Machine Learning/Homework1")
?Pandoc
?Pandoc.convert
Pandoc.convert(f = "homework1.md", format = "pdf", options = "-S")
library(pander)
Pandoc.convert(f = "homework1.md", format = "pdf", options = "-S")
setwd("M:/A Master of Science in Marketing Sciences/MS Machine Learning/Homework1")
Pandoc.convert(f = "homework1.md", format = "pdf", options = "-S")
Pandoc.convert(f = "homework1.md", format = "docx", options = "-S")
Pandoc.convert(f = "homework1.md", format = "docx")
Pandoc.convert(f = "homework1.md", format = "pdf")
mlfin = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/b8142c7257d20c44.csv", header = TRUE)
attach(mlfin)
mlfin$date = as.character(mlfin$date)
mlfin$date <- as.Date(mlfin$date, "%m/%d/%Y")
mlfin$RET = as.character(mlfin$RET)
mlfin$RET = as.numeric(mlfin$RET)
threshold1 = as.Date("12/31/2005","%m/%d/%Y")
threshold2 = as.Date("12/31/2010","%m/%d/%Y")
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
library(tidyr)
newtrain1 = subset(train1, select = -c(PERMNO))
train1wide = spread(newtrain1, TICKER, RET)
newtrain2 = subset(train2, select = -c(PERMNO))
train2wide = spread(newtrain2, TICKER, RET)
newtest = subset(test, select = -c(PERMNO))
testwide = spread(newtest, TICKER, RET)
rm(train1,train2,test,newtrain1,newtest,newtrain2)
summary(mlfin)
test = subset(mlfin, date > threshold2)
Pandoc.convert(f = "homework1.md", format = "pdf")
train1wide
names(train1wide)
subset(train1wide, select = -c(HWP,SBC))
a = subset(train1wide, select = -c(HWP,SBC))
train1wide
a = subset(train1wide, select = -c(HWP,SBC))
names(a)
names(train1wide)
train1wide = subset(train1wide, select = -c(HWP,SBC))
names(train2wide)
names(teswtide)
names(testwide)
testwide = subset(testwide, select = -c(ARNC))
testwide
names(testwide) == names(train1wide)
names(testwide) == names(train2wide)
library("pander", lib.loc="D:/R/R-3.3.2/R-3.3.2/library")
detach("package:pander", unload=TRUE)
install.packages("prcomp")
attach(prcomp
mlfin$date = as.character(mlfin$date)
mlfin$date <- as.Date(mlfin$date, "%m/%d/%Y")
mlfin$RET = as.character(mlfin$RET)
mlfin$RET = as.numeric(mlfin$RET)
threshold1 = as.Date("12/31/2005","%m/%d/%Y")
threshold2 = as.Date("12/31/2010","%m/%d/%Y")
summary(mlfin)
train1 = subset(mlfin, date <= threshold1)
train2 = subset(mlfin, date <= threshold2 & date > threshold1)
test = subset(mlfin, date > threshold2)
library(tidyr)
newtrain1 = subset(train1, select = -c(PERMNO))
train1wide = spread(newtrain1, TICKER, RET)
newtrain2 = subset(train2, select = -c(PERMNO))
train2wide = spread(newtrain2, TICKER, RET)
newtest = subset(test, select = -c(PERMNO))
testwide = spread(newtest, TICKER, RET)
rm(train1,train2,test,newtrain1,newtest,newtrain2)
names(train1wide)
names(train2wide)
## "HWP" "SBC" are included in Train1 but not Train2 + Test
names(testwide)
## "ARNC" are added into Test after Train2
train1wide = subset(train1wide, select = -c(HWP,SBC))
testwide = subset(testwide, select = -c(ARNC))
attach(prcomp)
library(prcomp)
install.packages("prcomp")
?prcomp
prcomp(train1wide, scale = FALSE)
prcomp(as.matrix(train1wide)[2:,], scale = FALSE)
train1 = as.matrix(train1wide)
train1
train1[1,]
train1[,1]
train1[,2:]
train1[,2]
train1[,2-]
train1[,2:]
train1[,c(2:)]
train1[,2:4]
train1[,2:lemgth(train1)]
train1[,2:length(train1)]
train1[,2:length(train1[1,])]
data1 = train1[,2:length(train1[1,])]
prcomp(data1, scale = FALSE)
summary(data1)
str(data1)
prcomp(train1wide, scale = FALSE)
prcomp(train1wide[,2:length(train1wide[1,])], scale = FALSE)
train1wide$"HPQ"
hpq = train1wide$"HPQ"
hp_prior = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/a5f3bc1a54b620ff.csv", header = TRUE)
attach(hp_prior)
hp_prior$date = as.character(hp_prior$date)
hp_prior$date <- as.Date(hp_prior$date, "%m/%d/%Y")
hp_prior$RET = as.character(hp_prior$RET)
hp_prior$RET = as.numeric(hp_prior$RET)
hp_prior
hp_prior$RET[1:585]
train1wide$"HPQ"[1:585]
train1wide$"HPQ"[1:586]
train1wide$"HPQ"[1:585] = hp_prior$RET[1:585]
train1wide$"HPQ"
prcomp(train1wide[,2:length(train1wide[1,])], scale = FALSE)
View(train1wide)
train1_data = train1wide[,2:length(train1wide[1,])]
sum(is.na(train1_data))
which(is.na(train1_data))
rm(train10)
rm(train1)
rm(mlfin2)
rm(mj)
View(train1_data)
position = which(is.na(train1_data))
train1_data[position[1]]
position[1]
train1_data[34657]
mean(train1_data,na.rm=TRUE)
mean(train1_data,na.omit=TRUE)
A2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
replace(train1_data, TRUE, lapply(train1_data, NA2mean))
replace(train1_data, TRUE, lapply(train1_data, A2mean))
NA2mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))
replace(train1_data, TRUE, lapply(train1_data, NA2mean))
tr1= replace(train1_data, TRUE, lapply(train1_data, NA2mean))
prcomp(tr1, scale = FALSE)
hp_prior = read.csv(file = "M:/A Master of Science in Marketing Sciences/MS Machine Learning/a5f3bc1a54b620ff.csv", header = TRUE)
attach(hp_prior)
hp_prior$date = as.character(hp_prior$date)
hp_prior$date <- as.Date(hp_prior$date, "%m/%d/%Y")
hp_prior$RET = as.character(hp_prior$RET)
hp_prior$RET = as.numeric(hp_prior$RET)
train1wide$"HPQ"[1:585] = hp_prior$RET[1:585]
train1_data = train1wide[,2:length(train1wide[1,])]
sum(is.na(train1wide))
train1_data = train1wide[,2:length(train1wide[1,])]
sum(is.na(train1wide))
train1_data = replace(train1_data, TRUE, lapply(train1_data, NA2mean))
tr1pca = prcomp(train1_data, scale = FALSE)
summary(tr1pca)
tr1pca$rotation
round(tr1pca$rotation,2)
tr1pcaVar = tr1pca$sdev^2
tr1pcaVar/sum(tr1pcaVar)
tr1pve = tr1pcaVar/sum(tr1pcaVar)
round(tr1pve,2)
plot(tr1pve)
tr1pca$rotation
tr1pca$rotation[1:3]
tr1rot = tr1pca$rotation
summary(tr1rot)
tr1rot[,1]
tr1rot[1:3,1]
tr1rot[1:3,]
round(tr1rot[1:3,],4)
t(round(tr1rot[1:3,],4))
plot(tr1pve, type = "b")
plot(tr1pve, type = "b", main "Scree Plot for Principal Component Analysis in Trainset Set 1")
plot(tr1pve, type = "b", main = "Scree Plot for Principal Component Analysis in Trainset Set 1")
plot(tr1pve, type = "b", main = "Scree Plot for PCA with Trainset Set 1")
plot(tr1pve, type = "b", main = "Scree Plot for PCA with Trainset Set 1", ylab = "Proportion of Variance Explained", xlab = "Number of Components")
tr1rot = tr1pca$rotation
round(tr1rot[1:3,],4)
round(tr1rot[,1:3],4)
round(tra1loading,4)
tra1loading = tr1rot[,1:3]
round(tra1loading,4)
sum(is.na(train2wide))
train2wide %*% tra1loading
train2_data = train2wide[,2:length(train2wide[1,])]
train2_data %*% tra1loading
str(train2_data)
as.numeric(train2_data_ %*% tra1loading
str(train2_data)
as.numeric(train2_data) %*% tra1loading
str(tra1loading)
as.numeric(train2_data) %*% tra1loading[,1]
as.matrix(train2_data) %*% tra1loading[,1]
as.matrix(train2_data) %*% tra1loading
apply(as.matrix(train2_data) %*% tra1loading,1,sum)
train2_daily_predict = apply(as.matrix(train2_data) %*% tra1loading,1,sum)
round(train2_daily_predict,2)
train2_data = train2wide[,2:length(train2wide[1,])]
train2_daily_predict = apply(as.matrix(train2_data) %*% tra1loading,1,sum)
round(head(train2_daily_predict,20),4)
train2_data = train2wide[,2:length(train2wide[1,])]
train2_daily_predict = as.matrix(train2_data) %*% tra1loading
round(head(train2_daily_predict,20),4)
train2_daily_predict
data <- c(1,2,1,2,10,2,1,2,1,2,3,4,5,6,2,5)
SlidingWindow("mean", data, 3, 1)
data <- c(1,2,1,2,10,2,1,2,1,2,3,4,5,6,2,5)
http://coleoguy.github.io/::SlidingWindow("mean", data, 3, 1)
data <- c(1,2,1,2,10,2,1,2,1,2,3,4,5,6,2,5)
coleoguy.github.io/::SlidingWindow("mean", data, 3, 1)
install.packages("SlidingWindow")
library(devtools)
install_github('coleoguy.github.io')
install_github('coleoguy.github.io/')
install_github('http://coleoguy.github.io/')
install_github('natanelia/sliding-window-protocol')
xts(train1wide,order.by=date)
install.packages("xts")
library(xts)
xts(train1wide,order.by=date)
xts(train1wide,order.by = train1wide$date)
mjt1 = as.xts(train1wide)
str(train1wide)
mjt1 = as.xts(train1wide)
train2_daily_predict
train2_data
cbind(train2wide[])
cbind(train2wide[31,1],train2wide[31,2],train2_daily_predict[30,1])
cbind(train2wide[31,1],train2wide[31,2],train2_daily_predict[30,1],train2_daily_predict[30,2],train2_daily_predict[30,3])
